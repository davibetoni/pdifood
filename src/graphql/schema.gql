scalar Datetime
scalar Json

# ------ Inputs ---------
input RestaurantInput {
  name: String!
  cnpj: String!
}

input UserRestaurantInput {
  userId: String!
  restaurantId: String!
  userName: String
  restaurantName: String
}

input ProductInput {
  restaurantId: String!
  name: String!
  price: Float!
  ingredients: Json
  imageUrl: String
}

input OrderInput {
  id: String!
  finishedAt: String
}

input OrderProductInput {
  orderId: String!
  productId: String!
  quantity: Float!
  newIngredients: Json
}

input CouponInput {
  code: String!
  value: Float!
  percent: Boolean
  validDate: Datetime
}

input OrderCouponInput {
  orderId: String!
  couponId: String!
}
# -------------------------

# ------- Querys ---------
input OrderQuery {
  finishedAt: Datetime
}

input ProductQuery {
  name: String
  price: Float
  restaurantId: String
  order: OrderingProduct
}

input CouponQuery {
  code: String
  value: Float
  percent: Boolean
  validDate: Datetime
}

enum OrderingProduct {
  moreThan
  lessThan
  asc
  desc
}
# -------------------------

# ------- Types ---------
type FinishOrder {
  id: String
  finishedAt: String
}

type UserRestaurant {
  userId: String
  restaurantId: String
  userName: String
  restaurantName: String
}

type Product {
  id: String
  restaurantId: String
  name: String
  price: Float
  ingredients: Json
  imageUrl: String
  createdAt: Datetime
  updatedAt: Datetime
}

type Restaurant {
  id: String
  name: String
  cnpj: String
  products: [Product]
  createdAt: Datetime
  updatedAt: Datetime
}

type OrderProduct {
  product: Product
  quantity: Int
  price: Float
  newIngredients: Json
}

type Order {
  id: String
  userId: String
  finishedBy: String
  finishedAt: Datetime
  totalQuantity: Int
  totalPrice: Float
  orderProducts: [OrderProduct]
  coupons: [Coupon]
  createdAt: Datetime
  updatedAt: Datetime
}

type Coupon {
  id: String
  code: String
  value: Float
  percent: Boolean
  validDate: Datetime
}

type OrderCoupon {
  orderId: String
  couponId: String
}
# -------------------------

type Mutation {
  createRestaurant(content: RestaurantInput!): Restaurant
  createProduct(content: ProductInput!): Product
  createOrder: Order
  finishOrder(content: OrderInput!): FinishOrder
  createOrderProduct(content: OrderProductInput!): OrderProduct
  createCoupon(content: CouponInput!): Coupon
  createOrderCoupon(content: OrderCouponInput!): OrderCoupon
  createUserRestaurant(content: UserRestaurantInput!): UserRestaurant
}

type Query {
  restaurants(id: String, query: String): [Restaurant]!
  products(id: String, query: ProductQuery): [Product]!
  orders(id: String, query: OrderQuery): [Order]!
  coupons(id: String, query: CouponQuery): [Coupon]!
}
